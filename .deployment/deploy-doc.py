"""
Python script to deploy JavaDocs generated by build-doc.sh
"""
from __future__ import print_function
import os
import sys
import shutil
import mimetypes
import time
from time import strftime, sleep
import boto3
from botocore.exceptions import ClientError
import subprocess as sp

SOURCE_DIR = 'JavaDoc' # The directory for javadocs.
S3_BUCKET = os.environ['S3_BUCKET_ANDROID'] # sys.argv[1] # The bucket that hosts the front end
AWS_REGION = os.environ['REGION'] # The AWS region
ACCESS_KEY = os.environ['AWS_ACCESS_KEY'] # AWS Key
SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY'] # AWS Secret

"""
Adopted from https://github.com/boto/boto3/issues/358#issuecomment-346093506
"""
def s3_sync(src_dir, bucket_name):
    try:
        s3_resource = boto3.resource('s3', aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_ACCESS_KEY, region_name=AWS_REGION)
    except ClientError as err:
        print("Failed to create boto3 client.\n" + str(err))
        return False

    if not os.path.isdir(src_dir):
        raise ValueError('src_dir %r not found.' % src_dir)
    all_files = []

    for root, dirs, files in os.walk(src_dir):
        all_files += [os.path.join(root, f) for f in files]

    for file in all_files:
        if not os.path.isfile(file):
            break

        filename = os.path.basename(file)
        print(filename)
        is_gzip = filename.endswith('.gz')

        # guess a mimetime
        mimetype = mimetypes.guess_type(os.path.relpath(file, src_dir))[0]

        # if a mimetype isn't guessable, make it an application/json
        if(mimetype == None):
            mimetype = 'application/json'

        print("Syncing: {}".format(file))
        print("Guessing Mimetype: {}".format(mimetype))
        if (is_gzip):
            file_without_gz = file[:-3]
            os.rename(file, file_without_gz)
            s3_resource.Object(bucket_name, os.path.relpath(file_without_gz, src_dir)).put(Body=open(file_without_gz, 'rb'), ACL='public-read', ContentType=mimetype, ContentEncoding='gzip')
        else:
            s3_resource.Object(bucket_name, os.path.relpath(file, src_dir)).put(Body=open(file, 'rb'), ACL='public-read', ContentType=mimetype)

    return True

def main():
    if not s3_sync(SOURCE_DIR, S3_BUCKET):
        sys.exit(1)

if __name__ == "__main__":
    main()