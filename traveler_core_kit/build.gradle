apply plugin: 'com.android.library'

ext {
    androidx_version = '1.0.2'
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "TRAVELER_API_KEY", "\""+getTravelerAPIKey()+"\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

}

def getTravelerAPIKey() {
    if (System.getenv("TRAVELER_API_KEY_DEBUG") != null) {
        return System.getenv("TRAVELER_API_KEY_DEBUG")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('traveler_api_key_debug', '')
    }
}

dependencies {

    //AndroidX dependencies
    // https://stackoverflow.com/questions/55172932/android-x-backwards-compatibility
    implementation "com.android.support:appcompat-v7:${android_support_component_version}"

    //Testing frameworks
    testImplementation "junit:junit:${junit_version}"
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation("org.mockito:mockito-core:2.23.4")
    androidTestImplementation("org.mockito:mockito-android:2.23.4")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

repositories {
    mavenCentral()
}

apply from: 'publish.gradle'
