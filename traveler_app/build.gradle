apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.guestlogix.traveler"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 8
        versionName "0.0.8"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "TRAVELER_API_KEY", "\""+getReleaseTravelerAPIKey()+"\"")
            buildConfigField "String", "GOOGL_SIGN_IN_CLIENT_ID", google_sign_in_client_id_release
        }

        debug {
            buildConfigField("String", "TRAVELER_API_KEY", "\""+getDebugTravelerAPIKey()+"\"")
            buildConfigField "String", "GOOGL_SIGN_IN_CLIENT_ID", google_sign_in_client_id_debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    /*
    flavorDimensions 'brand', 'environment'
    productFlavors {
        gCrew {
            dimension = 'brand'
            buildConfigField "String", "TRAVELER_API_KEY", traveler_key_debug
        }
        Traveler {
            dimension = 'brand'
            buildConfigField "String", "TRAVELER_API_KEY", traveler_key_debug
        }
        development {
            dimension = 'environment'
        }
        staging {
            dimension = 'environment'
        }
        production {
            dimension = 'environment'
        }
    }
    */
}

def getReleaseTravelerAPIKey() {
    if (System.getenv("TRAVELER_API_KEY_RELEASE") != null) {
        return System.getenv("TRAVELER_API_KEY_RELEASE")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('traveler_api_key_release', 'testtesttesttesttest')
    }
}

def getDebugTravelerAPIKey() {
    if (System.getenv("TRAVELER_API_KEY_DEBUG") != null) {
        return System.getenv("TRAVELER_API_KEY_DEBUG")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('traveler_key_debug', 'testtesttesttesttest')
    }
}

dependencies {

    // Traveler SDK
    implementation project(path: ':traveler_core_kit')
    implementation project(path: ':traveler_ui_kit')
    implementation project(path: ':traveler_stripe_payment_provider')

    // Android support dependencies
    implementation "com.android.support:appcompat-v7:${android_support_version}"
    implementation "com.android.support:recyclerview-v7:${android_support_version}"
    implementation "com.android.support.constraint:constraint-layout:${android_support_component_version}"
    implementation "android.arch.lifecycle:extensions:${android_support_component_version}"
    implementation "android.arch.navigation:navigation-fragment:${android_navigation_controller_version}"
    implementation "android.arch.navigation:navigation-ui:${android_navigation_controller_version}"

    // Testing frameworks
    testImplementation "junit:junit:${junit_version}"

    // Google Auth
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
}
repositories {
    mavenCentral()
}
