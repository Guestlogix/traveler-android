apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.guestlogix.traveler"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 8
        versionName "0.0.8"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            if (getTravelerAppDebugSigningStoreFile() != null && !getTravelerAppDebugSigningStoreFile().isEmpty()) {
                storeFile file(getTravelerAppDebugSigningStoreFile())
                storePassword getTravelerAppDebugSigningStorePassword()
                keyAlias getTravelerAppDebugSigningStoreAlias()
                keyPassword getTravelerAppDebugSigningKeyPassword()
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "TRAVELER_API_KEY", "\"" + getReleaseTravelerAPIKey() + "\"")
            buildConfigField("String", "GOOGL_SIGN_IN_CLIENT_ID", "\"" + getReleaseGoogleSignInClientID() + "\"")
        }

        debug {
            minifyEnabled false
            multiDexEnabled true
            buildConfigField("String", "TRAVELER_API_KEY", "\"" + getDebugTravelerAPIKey() + "\"")
            buildConfigField("String", "GOOGL_SIGN_IN_CLIENT_ID", "\"" + getDebugGoogleSignInClientID() + "\"")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    /*
    flavorDimensions 'brand', 'environment'
    productFlavors {
        gCrew {
            dimension = 'brand'
            buildConfigField "String", "TRAVELER_API_KEY", traveler_key_debug
        }
        Traveler {
            dimension = 'brand'
            buildConfigField "String", "TRAVELER_API_KEY", traveler_key_debug
        }
        development {
            dimension = 'environment'
        }
        staging {
            dimension = 'environment'
        }
        production {
            dimension = 'environment'
        }
    }
    */
}

def getReleaseTravelerAPIKey() {
    if (System.getenv("TRAVELER_API_KEY_RELEASE") != null) {
        return System.getenv("TRAVELER_API_KEY_RELEASE")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('traveler_api_key_release')
    }
}

def getDebugTravelerAPIKey() {
    if (System.getenv("TRAVELER_API_KEY_DEBUG") != null) {
        return System.getenv("TRAVELER_API_KEY_DEBUG")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('traveler_api_key_debug')
    }
}

def getReleaseGoogleSignInClientID() {
    if (System.getenv("GOOGL_SIGN_IN_CLIENT_ID_RELEASE") != null) {
        return System.getenv("GOOGL_SIGN_IN_CLIENT_ID_RELEASE")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('google_sign_in_client_id_release')
    }
}

def getDebugGoogleSignInClientID() {
    if (System.getenv("GOOGL_SIGN_IN_CLIENT_ID_DEBUG") != null) {
        return System.getenv("GOOGL_SIGN_IN_CLIENT_ID_DEBUG")
    } else {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        return properties.getProperty('google_sign_in_client_id_debug')
    }
}

def getTravelerAppDebugSigningStoreFile() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('traveler_app_debug_signing_storeFile')
}

def getTravelerAppDebugSigningStorePassword() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('traveler_app_debug_signing_storePassword')
}

def getTravelerAppDebugSigningStoreAlias() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('traveler_app_debug_signing_keyAlias')
}

def getTravelerAppDebugSigningKeyPassword() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('traveler_app_debug_signing_keyPassword')
}

dependencies {
    // This is a temporary solution to the huge bloat introduced by Stripe
    // An issue is filed under their android github page.
    implementation 'com.android.support:multidex:1.0.3'

    // Traveler SDK
    implementation project(path: ':traveler_core_kit')
    implementation project(path: ':traveler_ui_kit')
    implementation project(path: ':traveler_stripe_payment_provider')

    // Android support dependencies
    implementation "com.android.support:appcompat-v7:${android_support_version}"
    implementation "com.android.support:recyclerview-v7:${android_support_version}"
    implementation "com.android.support:preference-v7:${android_support_version}"
    implementation "com.android.support.constraint:constraint-layout:${android_support_component_version}"
    implementation "android.arch.lifecycle:extensions:${android_support_component_version}"
    implementation "android.arch.navigation:navigation-fragment:${android_navigation_controller_version}"
    implementation "android.arch.navigation:navigation-ui:${android_navigation_controller_version}"

    // Testing frameworks
    testImplementation "junit:junit:${junit_version}"

    // Google Auth
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
}
repositories {
    mavenCentral()
}
